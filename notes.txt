No overflow
You can use single and double quotes.
'as\n\t'
print(_)
underscore is the return value of the last thing you used
_number gives you the result from number (e.g. _6)

python2:
5 / 2 = 2
5 / 2.0 = 2.5
python3:
5 / 2 = 2.5
5 // 2 = 2
2 ** 10 = pow(2,10) = 1024

''' is a multiline strings:
'''
asf
asd
fas
fasd
f'''
Gives you the newlines and everything.

r'' is a raw string, it's like, it does not use the escape symbols (\)
r'\n\t' will then be '\\n\\t'

help(name) gives you the documentation for the function
or in linux use print?

print('nonni,'gunni','agust')
will print: nonni gunni agust

print('asdf', end='lol') will print: asdflol
print('nonni,'gunni','agust', sep=", ") will print: nonni, gunni, agust

print is also a statement:  print nonni

there is no double in python, only float
a = 4.12
type(a)
<class 'float'>

dir() is a function that shows you everything that you can use at this point.
dir(a) will give you all functions that you can use on a
print and everything are in __builtins__. check dir(__builtins__)

everything in python is an object (also the functions)

(5).__add__(12) = 5 + 12

__func__ are either private functions or functions that can be used with another way. 

pow(4,5,7) = 4^5 modulo 7, modulo is used to stop overflow

bin(1337) is a string of binary: 0b10100111001
int(_,2) is binary to int (base 2)
hex(1337) = 0x539
int(_,16)
oct(1337) = 0o2471

We use list instead of an array
a = [1,2,3,4,5]
don't have to use the same type:
a.extend([1,2,3,4,5]) = [1,2,3,4,5,1,2,3,4,5]
a.append([1,2,3,4,5]) = [1,2,3,4,5,1,2,3,4,5,[1,2,3,4,5])
can access the other list with: a[10][1] = 2
or a += [3]
a.remove(3) # removes the first 3 from the list
a.pop() # removes the last item
a.count(2) # counts how many 2 are, but does not go into other lists

stack = []
stack.insert(0, 15) = [15]
stack.insert(0, 50) = [50, 15]

don't use a[len(a)-1], but use a[-1] instead.

     6  3  8  1
ind  0  1  2  3
    -4 -3 -2 -1


XOR = 5^2
OR = 5|3
1|2|3|8 = 15
1&2&4&7 = 0

id(a) gives you the memory address of a

2 << 23 works as in the C family

sum(a), max(a), min(a)

sum([ [1], [2,3], [4,5] ], [])
[1,2,3,4,5]

no character in python, uses strings
ord() changes character to a number
chr() changes a number to a character
ord('A')
chr(65)

always use 4 in indent

list(range(10)) changes the range to a list

iter(lis) gives you an iterator of the list lis
it = iter(lis)
next(it) gives you the next item in the list and throws it out

list = [1,2,3,4]
it = iter(lis)
while True:
    try:
        i = next(it)
        print(i)
    except StopIteration:
        break

None is null in python
use e.g. if b is None

position argument
you can set a default value for parameters:
def fun(a,b,c=0): ...
fun(a,b,d=1)

def fun(*args, **kwargs):
    print(kwargs)
args are many arguments(parameters), e.g. fun(1,2,4,4,5,6....)
fun(12,3,5,6,b=True)     ... here the keywargs argument is b=True, Now you can use any parameter whatsoever

**dict is to print every key in a dictionary.
*list is to print every key in a list.
print(*lis, **d)

if we have a global value and we are not using them as constant, we need to specify in the function that they are global
bla2 = ''
def bla():
    global bla2

if we specify a string at the first line of a function, then this string will be the doc string.
def fun():
    '''
    omg blabla bla
    '''
help(fun)

if you don't want to continue an if statement, you should do pass:
if blabla:
    pass
else:

Annadhvert stak:
lis[2:6:2]

In order to create a tuple of one element, you have to put comma in the back:
b = (1,)

nota enumerate is stad:
for i in range(len(lis)):
    print(i, lis[i])

enumerate([5,2,3,4,1])

for i, n in enumerate(lis):
    print(i, n)
this is the same as before, called unpacking.

don't need () to write tuples... 2,4,5 is the same as (2,4,5)

divmod(5,2) = (2,1)   this is (5/2, 5%2)

div, mod = divmod(2,5)   so div = 2 and mod = 1

a = (1,2,3)
x,*y = a  so x = 1 and y = [2,3]

a, = lis   ==   a = lis[0]

[ i for i in range(10) if i % 3 == 2 ]

set is constant lookup but list is linear

list(set(lis)) hendir ut endurtekningum

for key, val in sorted(d.items()):
    print(key,val)

'this is fun'.capitalize()  sets the first char to cap, then there is .upper(), 
.swapcase(), lower(), title()

x.rjust(30, 'X') fills 30 x before word,, and then .ljust()
x.endswith() startswith()

x.split(maxsplit=1) = x.split(None,1)

don't use 'asdf' + ' asdf'. To concatenate strings:
'%d %f' % (5, 5.3)    also %s.. so can use '%s' % 'lala'... also '%r' which is representation
And then the new way:
x = '''Username: {0}
Password: {1}'''
x.format('nonni', 'wat') or:
{x} and {y} and then x.format(x='nonni', y='wat')

[x+3 for x in lis] == map(add_3, lis)

f = lambda: 'yayy'
f() = 'yayy'

f = lambda x: 5 + x
f(5) = 10

filter(lambda x: len(str(x)) == 2, lis)
list(_)   =  [27, 64]

f = lambda x, y: x ** y
f(4,5) = 1024

for i in range(min(len(a), len(b))):
    print(a[i], b[i])
ekki gera thetta, nota frekar zip:
for i in zip(a, b):
    print(a[i], b[i])
zip returns the zip object, so use list(zip)
or just simply:
for x,y in zip(a,b):
    print(x,y)

studs = [('darri', 8), ('david', 9), ('jon', 5)]
grade = zip(*studs) = [('darri','david','jon'),(8,9,5)]
*studs takes every first element in a list and puts it in a list, and every second element and puts it in another list:
grade[1]/len(grade[1]) gives you the average grade

import functools as func
from functools import partial as par

import functools
list(map(partial(pow, 2), range(10)))

import operator
these are all the operators
list(map(partial(operator.add,5),range(10)))

map(str.split, data.splitlines())
list(map(lambda x: x.split() data.splitlines()))

from pprint import pprint
pprint(sorted)

sorted(data, key=lambda x: x[2])
sorted(data, key=lambda x: (x[2], x[0])
verdicts = ['abc', 'aaa', 'er']
sorted(data, key=lambda x: (x[2], x[0], verdicts.index(x[1])))

from functools import reduce
reduce(lambda x,y: x+y, range(100), 0)
reduce(lambda x,y: '{0}{1}'.format(x,y), ['a','b','c'],'')

import itertools
c = itertools.cycle('ABCD')
next(c) can be called always

for s, g in zip(students, itertools.cycle('ABCD)):
    print(s,g)
and set(students) gives you unique
and sorted(set(students))

lis = [[1,2,3],[4,5,6],[7,8,9]]
list(itertools.chain(*lis))
gives you the list: [1,2,3,4,5,6,7,8,9]

x = itertools.cycle('abc')
itertools.isslice(x,6)
itertools.isslice(x,2,5)

the regular zip stops after the shortest list, but zip_longest stops after the longest list
list(itertools.zip_longest([1,2,3,4],[2,2], fillvalue=0)):
[(1,2), (2,2), (3,0), (4,0)]

def contains_pair(lis):
    for a,b in zip(lis, lis[1:]):
        if a == b:
            return True
    return False

from operator import sub
from itertools import starmap
def contains_pair(lis):
    return not all(a - b for a,b in zip(lis, lis[1:]))

def contains_pair(lis):
    return not all(starmap(sub,zip(lis, lis[1:])))

from itertools import product
product([1,2,3],[4,5,6])
= [(1,4), (1,5), (1,6), 2...,3...,]

list(map(''.join, product('abc','abc')))
list(map(''.join, product('abc', repeat=4)))

word = {'dog', 'cat', 'horse'}
letters = 'alf'

from itertools import permutations
for x in perutations(letters):
    if ''.join(x)) in word:
        print('yay',x)
synir allar umradanir af thessum stokum
can also check of every length
for i,_ in enumerate(letters):
    for x in perutations(letters, i):
        if ''.join(x)) in word:
            print('yay',x)

the difference between combinations and permutations is that the order doesn't matter.
from itertools import combinations
combinations('abc',2)

def _do_test(list, expected):
    assert contains_pair(lis) == expected, lis

def test():
    _do_test([], False)
    _do_test([1], False)
    _do_test([1,1], True)
    _do_test([1,2], False)
    _do_test(range(100), False)
    _do_test(list(range(100))+[99], True)
    

from itertools import combinations
def partition(lis):
    n = len(lis)
    for i in range(1, n):
        res = []
        for c in combinations(range(0, n-1), i):
            c = (0,) + c
            for s, e in zip(c, c[1:]):
                resp.append(lis[s:e+1])
            res.append(lis[c[-1]+1:])
            #print(res)
            res = []


yield vistar stateid a fallinu i stadinn fyrir return.. getum gert next a fallid.

groupby

{x:list(y) for x,y in groupby(sorted(names))}

res = input('Enter a number: ')
res = input()
asdf asdf asd f                (like getline)

raw_input
eval('5+3-12')    gives you the int -4
eval('5+3-a') gives you the variable a.. but can use:
eval('5+3-a', dict())

exec('b=12')

import string
string.ascii_lowecase

import sys
sys.stdout.write('halo\n')
returns halo and then how many bytes went into the stream

sys.stdin.read()
sys.stderr.write('error')

import os
os.getcwd()

open(r'path/to/file')
f.seek(0) if we want to start again to read, because these are streams (act similar to iterators, eat up the file)
f.readline()
f.readline(
next(f)

f.readlines()
f.read().splitlines()

dict(map(str.split, f.read().splitlines()))

f = open('bad.txt', encoding='latin1')
f = open('bad.txt', encoding='utf-8')

f = open('bad.txt', mode='rb')
type(f.read()) = bytes
b.decode('utf-8')

f.write()
f.flush()
f.close()

open('b.txt', 'a')   appends but 'w' override s

from datetime import datetime
datetime.now()
datetime.max
datetime.min

day = timedelta(days=1)
datetime.now() + day

import pdb
pdb.set_trace()     sets a break point
l           shows the code
n           next line -> step over
s           next line -> step in
c           continue
variable    shows what is in variable
enter       performs the previous command

import re
m = re.search('nonni', 'Hann nonni er alltaf uti')
m.group()
m.start()
m.end()

m = re.search('e.', s)
possible is er or ea or ei or e.
m = re.search('e..', s)     possible ert eru ... 

^ is in front,, and $ is last
m = re.search('^Hann', s)   does the string start with Hann
m = re.search('uti$', s)    does the string end with uti

m = re.search('n.* ', s)    is something that start with n and there can be anything behind, but ends with whitespace
* is greedy, tries to find the last match
returns ' nonni er alltaf '
m = re.search(' n.*? ', s)   now it is non greedy., just returns ' nonni '

m = re.search('er.+ alltaf', s) gives none but if + were *, then is it 'er alltaf'

m = re.search('-?[0-9]+', '-123987')  gives -123987

re.search('a{3,6}', 'blaaaa')   gives three to six a, but tries the most.. otherwise ?

re.search('[abc]', 'a').group()
re.search('[a-z]', 'a').group()

| is match left side ooor right side
re.search('[a-c]{2}|lol', 'haall').group()  returns 'aa'

searcher = re.compile('timeout:\s*(.*)')

re.match('abc', 'abcde')
re.fullmatch('abc', 'asdf') == re.match('^abc$', 'asdf')

re.split

re.sub('(Manchester|Leeds) United', 'Ronnie Cool', 'Leeds United rocks!')
returns Ronnie Cool rocks

sent = re.comile(r'[A-ZÁÐÉÍÞÓÚÆ]\w*[!?.]')
if we want to include dash, we do
sent = re.comile(r'[A-ZÁÐÉÍÞÓÚÆ][\w\s-]*[!?.]')         \s is with space
plainVanilla = '''Tuttugu og sjo starfsmonnum var sagt upp blablabla'''
sent.findall(plain_vanilla)

lex = re.compile(r'(?P<oper>[-+*()=;])|(?P<print>print)|(?P<end>end)|(?P<id>[A-Za-z]+)|(?P<num>[0-9]+)')
lex.findall('''var = 3; b = 4*(7-var); print b; end''')
for x in lex.finditer(prog):
    print([(a,b) for a,b in x.groupdict().items() if b][0])

os.getcwd()
os.listdir()            == ls
os.chdir('python')      == dc
os.mkdir('yay')     == mkdir yay
os.makedirs(r'lol/wat')      == mkdir -p lol/wat
for x in os.walk(.):
    print(x)
for root,dirs,files in os.walk('.'):
    print(root, dirs, files)

os.system('notepad')

dir = os.path.join('python', 'yay')
os.path.splitext('yay.tar.gz') = ['yay.tar', 'gz']

can also use shutil

import glob
glob('*1[0-1]')
glob('*1[0-1]/*')

# create grep application
import re, os, sys
PATH='/home/hjalti/doc/dev/exam'
RE=r'^ *dev \w+\(.*\d+.*\)'
CRE = re.compile(RE)
for root, dirs, files in os.walk(PATH):
    for f in files:
        path = os.path.join(root, f)
        try:
            with open(path) as cf:
                lines = cf.read().splitlines()
                for li in lines:
                    if CRE.search(li):
                        print(path, li)
        except:
            sys.stderr.write('could not open\n' % path)

To parse json objects:
jason = """json object'''
don't use eval(jason)
import json
# dumps serializes to a string, but dump to a file
json.dumps(jason)
json.dump(data, file, indent=2)

from xml.etree import ElementTree as ET
et = ET.parse('test.xml')
r = et.getroot()
r.getchildren()
r.find('projects')
r.findall('.//edition')
et.findall(".//edition[@language='English']")
x = et.findall(".//edition[@language='English']/../..")
x.tag()
x.keys()
x[0]

import pickle
f = open('bla.pickle', 'wb')
pickle.dump(data, f)
f.close()

import urllib.request
json.loads(urllib.request.urlopen('www.fotbolti.net').read().decode('utf-8'))
resp['results']
resp['results'][0]['status']
for x,y in resp['results'][0].items():
    print(x,y)

import logging
logger = logging.getLogger(__name__)
logger = logging.getLogger('test')
logger.error('shii')
logger.fatal('shii')
logger.warning('shii')
logger.info('shii')
logger.debug('shii')


logging.basicConfig(level=logging.DEBUG,
                    filename='test.log',
                    filemode='w',
                    format='%(asciitime)-15s $(level)'
                    #stream=sys.stdout)    # CRITICAL, 51     w = overwrites

grep "5 [0-9]" file

import argparse

def re_type(s):
    try:
        re.compile(s)
    except:
        raise argparse.ArgumentTypeError('Invalid regex')
    return s

parser = argparse.ArgumentParser(description='Process some integers') <-- see documentation

parser = argparse.ArgumentParser(dectiption='Grep some')
parser.add_argument('pattern', metavar='PATTERN', type=re_type,
                    help='an integer for the accumulator')
parser.add_argument('file', metavar='FILE', type=argparse.FileType('r'),
                    help='an integer for the accumulator')
parser.add_argument('-i', '--ignore-case', action='store_true', default=false,
                    help='Ignores the case of pattern')
parser.add_argument('-C', '--context', tyle=int, default=0
                    help='Print context of matches (default: %(default)s)')
args = parser.parse_args()
flags = 0
if args.ignore_case:
    flags |= re.I
p = re.compile(args.pattern, flags)
lines = args.file.read().splitlines()
for i, line in enumerate(lines):
    if p.search(line):
        print('\n'.join(lines[i-args.context:i+args.context+1]))


with open automatically calls f.close() in the end
== f = open() and f.close()


#!/usr/bin/env python3
chmod u+x test.py
./test.py


















